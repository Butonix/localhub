# Generated by Django 3.0.5 on 2020-04-22 22:31

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import model_utils.fields
import sorl.thumbnail.fields

import localhub.markdown.fields


class Migration(migrations.Migration):

    replaces = [
        ("communities", "0001_initial"),
        ("communities", "0002_auto_20190530_0922"),
        ("communities", "0003_community_email_domain"),
        ("communities", "0004_auto_20190602_1838"),
        ("communities", "0005_auto_20190705_1857"),
        ("communities", "0006_community_terms"),
        ("communities", "0007_community_content_warning_tags"),
        ("communities", "0008_auto_20190724_2227"),
        ("communities", "0009_auto_20190804_1518"),
        ("communities", "0010_auto_20190813_1515"),
        ("communities", "0011_auto_20190814_2109"),
        ("communities", "0012_auto_20190901_1129"),
        ("communities", "0013_auto_20190906_0526"),
        ("communities", "0014_auto_20190906_2121"),
        ("communities", "0015_auto_20190908_1023"),
        ("communities", "0016_auto_20190908_1042"),
        ("communities", "0017_auto_20190925_1212"),
        ("communities", "0018_auto_20200216_0930"),
        ("communities", "0019_auto_20200305_1456"),
        ("communities", "0020_auto_20200305_1500"),
        ("communities", "0021_auto_20200305_1501"),
        ("communities", "0022_auto_20200312_0915"),
        ("communities", "0023_auto_20200312_0925"),
        ("communities", "0024_delete_historicalcommunity"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="This is not a valid domain",
                                regex="([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)",
                            )
                        ],
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", localhub.markdown.fields.MarkdownField(blank=True)),
                (
                    "public",
                    models.BooleanField(
                        default=True,
                        help_text="This community is open to the world. Non-members can view all published content.",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True, help_text="This community is currently live."
                    ),
                ),
            ],
            options={"verbose_name_plural": "Communities",},
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("moderator", "Moderator"),
                            ("admin", "Admin"),
                        ],
                        db_index=True,
                        default="member",
                        max_length=9,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="communities.Community",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"unique_together": set(),},
        ),
        migrations.AddField(
            model_name="community",
            name="members",
            field=models.ManyToManyField(
                related_name="communities",
                through="communities.Membership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="email_domain",
            field=models.CharField(
                blank=True,
                help_text="Will add domain to notification emails from this site, e.g. notifications@this-domain.com. If left empty will use the site domain by default.",
                max_length=100,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="This is not a valid domain",
                        regex="([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)",
                    )
                ],
            ),
        ),
        migrations.AddIndex(
            model_name="membership",
            index=models.Index(
                fields=["member", "community", "active"],
                name="communities_member__7f5a47_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="membership",
            constraint=models.UniqueConstraint(
                fields=("member", "community"), name="unique_membership"
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="terms",
            field=localhub.markdown.fields.MarkdownField(
                blank=True,
                help_text="Terms and conditions, code of conduct and other membership terms.",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="content_warning_tags",
            field=models.TextField(
                blank=True,
                default="#nsfw",
                help_text="Any posts containing these tags in their description will be automatically hidden by default",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="admin",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="logo",
            field=sorl.thumbnail.fields.ImageField(
                blank=True,
                help_text="Logo will be rendered in PNG format.",
                null=True,
                upload_to="logo",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="blacklisted_email_addresses",
            field=models.TextField(
                blank=True,
                help_text="Join requests from these addresses will be automatically rejected. Separate with spaces.",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="blacklisted_email_domains",
            field=models.TextField(
                blank=True,
                help_text="Join requests from these domains will be automatically rejected. Separate with spaces.",
            ),
        ),
        migrations.RemoveField(model_name="community", name="public",),
        migrations.AddField(
            model_name="community",
            name="intro",
            field=localhub.markdown.fields.MarkdownField(
                blank=True,
                help_text="Text shown in Login and other pages to non-members.",
            ),
        ),
        migrations.AlterField(
            model_name="community",
            name="description",
            field=localhub.markdown.fields.MarkdownField(
                blank=True,
                help_text="Longer description of site shown to members in Description page.",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="allow_join_requests",
            field=models.BooleanField(
                default=True,
                help_text="Users can send requests to join this community. If disabled they will only be able to join if an admin sends them an invite.",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="tagline",
            field=models.TextField(
                blank=True, help_text="Summary shown in your Local Network."
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="listed",
            field=models.BooleanField(
                default=True,
                help_text="Community is visible to non-members in Local Network.",
            ),
        ),
        migrations.AlterModelManagers(name="community", managers=[],),
        migrations.AddField(
            model_name="community",
            name="google_tracking_id",
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="tagline",
            field=models.TextField(
                blank=True, help_text="Summary shown in Communities index page"
            ),
        ),
        migrations.RemoveField(model_name="community", name="admin",),
        migrations.RenameField(
            model_name="community", old_name="listed", new_name="public",
        ),
        migrations.AlterField(
            model_name="community",
            name="public",
            field=models.BooleanField(
                default=True,
                help_text="Community is visible to non-members in Communities index page.",
            ),
        ),
        migrations.AlterField(
            model_name="community",
            name="public",
            field=models.BooleanField(
                default=True,
                help_text="Community is visible to non-members in Community Hub.",
            ),
        ),
        migrations.AlterField(
            model_name="community",
            name="public",
            field=models.BooleanField(
                default=True,
                help_text="Community is visible to non-members in Communities page.",
            ),
        ),
        migrations.AlterField(
            model_name="community",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="allow_join_requests",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="blacklisted_email_addresses",
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="blacklisted_email_domains",
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="content_warning_tags",
            field=models.TextField(blank=True, default="#nsfw"),
        ),
        migrations.AlterField(
            model_name="community",
            name="description",
            field=localhub.markdown.fields.MarkdownField(blank=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="email_domain",
            field=models.CharField(
                blank=True,
                max_length=100,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="This is not a valid domain",
                        regex="([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="community",
            name="intro",
            field=localhub.markdown.fields.MarkdownField(blank=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="logo",
            field=sorl.thumbnail.fields.ImageField(
                blank=True, null=True, upload_to="logo"
            ),
        ),
        migrations.AlterField(
            model_name="community",
            name="public",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="community", name="tagline", field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name="community",
            name="terms",
            field=localhub.markdown.fields.MarkdownField(blank=True),
        ),
    ]
