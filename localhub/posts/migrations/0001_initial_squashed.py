# Generated by Django 3.0.5 on 2020-04-22 22:41

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import model_utils.fields
import simple_history.models
import taggit.managers

import localhub.hashtags.fields
import localhub.markdown.fields
import localhub.users.fields

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# localhub.posts.migrations.0015_auto_20191121_1747


class Migration(migrations.Migration):

    replaces = [
        ("posts", "0001_initial"),
        ("posts", "0002_auto_20190705_1857"),
        ("posts", "0003_post_editor"),
        ("posts", "0004_remove_post_editor"),
        ("posts", "0005_historicalpost"),
        ("posts", "0006_auto_20190720_1756"),
        ("posts", "0007_auto_20190727_0918"),
        ("posts", "0008_auto_20190729_2118"),
        ("posts", "0009_auto_20190801_0645"),
        ("posts", "0010_auto_20190801_0717"),
        ("posts", "0011_auto_20190812_0720"),
        ("posts", "0012_auto_20190928_1432"),
        ("posts", "0013_auto_20191107_1651"),
        ("posts", "0014_auto_20191121_1540"),
        ("posts", "0015_auto_20191121_1747"),
        ("posts", "0016_auto_20200202_1029"),
        ("posts", "0017_auto_20200221_2242"),
        ("posts", "0018_auto_20200306_1026"),
        ("posts", "0019_auto_20200317_2242"),
        ("posts", "0020_auto_20200318_2200"),
        ("posts", "0021_auto_20200407_2251"),
        ("posts", "0022_auto_20200419_1330"),
        ("posts", "0023_auto_20200419_1419"),
        ("posts", "0024_auto_20200419_1436"),
        ("posts", "0025_auto_20200422_1856"),
        ("posts", "0026_delete_historicalpost"),
    ]

    initial = True

    dependencies = [
        ("communities", "0007_community_content_warning_tags"),
        ("communities", "0004_auto_20190602_1838"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("taggit", "0003_taggeditem_add_unique_index"),
    ]

    operations = [
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("description", localhub.markdown.fields.MarkdownField(blank=True)),
                (
                    "search_document",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=300)),
                ("url", models.URLField(blank=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="communities.Community",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.AddIndex(
            model_name="post",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_document"], name="posts_post_search__adec96_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["owner", "community"], name="posts_post_owner_i_f616f0_idx"
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="editor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="allow_comments",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="post",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reshares",
                to="posts.Post",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="is_reshare",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="HistoricalPost",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("description", localhub.markdown.fields.MarkdownField(blank=True)),
                (
                    "search_document",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=300)),
                ("url", models.URLField(blank=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="communities.Community",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("allow_comments", models.BooleanField(default=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="posts.Post",
                    ),
                ),
                ("is_reshare", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "historical post",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RemoveIndex(
            model_name="post", name="posts_post_owner_i_f616f0_idx",
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["created", "-created"], name="posts_post_created_f1ee68_idx"
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="metadata_description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="post",
            name="metadata_description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="metadata_image",
            field=models.URLField(blank=True, max_length=500),
        ),
        migrations.AlterField(
            model_name="historicalpost",
            name="url",
            field=models.URLField(blank=True, max_length=500),
        ),
        migrations.AddField(
            model_name="post",
            name="metadata_image",
            field=models.URLField(blank=True, max_length=500),
        ),
        migrations.AlterField(
            model_name="post",
            name="url",
            field=models.URLField(blank=True, max_length=500),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="published",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="post",
            name="published",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["published", "-published"], name="posts_post_publish_0f09a8_idx"
            ),
        ),
        # migrations.RunPython(
        # code=localhub.posts.migrations.0015_auto_20191121_1747.set_default_published,
        # ),
        migrations.RenameField(
            model_name="historicalpost",
            old_name="metadata_description",
            new_name="opengraph_description",
        ),
        migrations.RenameField(
            model_name="historicalpost",
            old_name="metadata_image",
            new_name="opengraph_image",
        ),
        migrations.RenameField(
            model_name="post",
            old_name="metadata_description",
            new_name="opengraph_description",
        ),
        migrations.RenameField(
            model_name="post", old_name="metadata_image", new_name="opengraph_image",
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="edited",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="post",
            name="edited",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="is_pinned",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="post",
            name="is_pinned",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="deleted",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="post",
            name="deleted",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="mentions",
            field=localhub.users.fields.MentionsField(blank=True, max_length=300),
        ),
        migrations.AddField(
            model_name="post",
            name="mentions",
            field=localhub.users.fields.MentionsField(blank=True, max_length=300),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="hashtags",
            field=localhub.hashtags.fields.HashtagsField(blank=True, max_length=300),
        ),
        migrations.AddField(
            model_name="post",
            name="hashtags",
            field=localhub.hashtags.fields.HashtagsField(blank=True, max_length=300),
        ),
        migrations.DeleteModel(name="HistoricalPost",),
    ]
