# Generated by Django 3.0.5 on 2020-04-22 22:35

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import model_utils.fields
import simple_history.models
import sorl.thumbnail.fields
import taggit.managers

import localhub.hashtags.fields
import localhub.markdown.fields
import localhub.users.fields

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# localhub.photos.migrations.0016_auto_20191121_1809


class Migration(migrations.Migration):

    replaces = [
        ("photos", "0001_initial"),
        ("photos", "0002_auto_20190705_1857"),
        ("photos", "0003_auto_20190705_2154"),
        ("photos", "0004_auto_20190709_2059"),
        ("photos", "0005_photo_editor"),
        ("photos", "0006_remove_photo_editor"),
        ("photos", "0007_historicalphoto"),
        ("photos", "0008_auto_20190720_1756"),
        ("photos", "0009_auto_20190727_0918"),
        ("photos", "0010_auto_20190729_2118"),
        ("photos", "0011_auto_20190801_0645"),
        ("photos", "0012_auto_20190801_0717"),
        ("photos", "0013_auto_20190812_0720"),
        ("photos", "0014_auto_20191107_1651"),
        ("photos", "0015_auto_20191121_1540"),
        ("photos", "0016_auto_20191121_1809"),
        ("photos", "0017_auto_20200202_1019"),
        ("photos", "0018_auto_20200221_2242"),
        ("photos", "0019_auto_20200306_1026"),
        ("photos", "0020_auto_20200317_2242"),
        ("photos", "0021_auto_20200318_2200"),
        ("photos", "0022_auto_20200321_1200"),
        ("photos", "0023_auto_20200407_2251"),
        ("photos", "0024_auto_20200419_1330"),
        ("photos", "0025_auto_20200419_1419"),
        ("photos", "0026_auto_20200419_1436"),
        ("photos", "0027_auto_20200422_1856"),
        ("photos", "0028_delete_historicalphoto"),
    ]

    initial = True

    dependencies = [
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("communities", "0007_community_content_warning_tags"),
        ("communities", "0004_auto_20190602_1838"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Photo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("description", localhub.markdown.fields.MarkdownField(blank=True)),
                (
                    "search_document",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("image", sorl.thumbnail.fields.ImageField(upload_to="photos")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="communities.Community",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.AddIndex(
            model_name="photo",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_document"], name="photos_phot_search__e98fe7_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="photo",
            index=models.Index(
                fields=["owner", "community"], name="photos_phot_owner_i_23fd94_idx"
            ),
        ),
        migrations.AddField(
            model_name="photo",
            name="artist",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name="photo",
            name="original_url",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="photo",
            name="cc_license",
            field=models.CharField(
                blank=True,
                choices=[
                    ("by", "Attribution"),
                    ("by-sa", "Attribution ShareAlike"),
                    ("by-nd", "Attribution NoDerivs"),
                    ("by-nc", "Attribution NonCommercial"),
                    ("by-nc-sa", "Attribution NonCommercial ShareAlike"),
                    ("by-nc-nd", "Attribution NonCommercial NoDerivs"),
                ],
                max_length=10,
                null=True,
                verbose_name="Creative Commons license",
            ),
        ),
        migrations.AddField(
            model_name="photo",
            name="editor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="photo",
            name="allow_comments",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="photo",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="photo",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reshares",
                to="photos.Photo",
            ),
        ),
        migrations.AddField(
            model_name="photo",
            name="is_reshare",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="HistoricalPhoto",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("description", localhub.markdown.fields.MarkdownField(blank=True)),
                (
                    "search_document",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("image", models.TextField(max_length=100)),
                ("artist", models.CharField(blank=True, max_length=100)),
                ("original_url", models.URLField(blank=True, null=True)),
                (
                    "cc_license",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("by", "Attribution"),
                            ("by-sa", "Attribution ShareAlike"),
                            ("by-nd", "Attribution NoDerivs"),
                            ("by-nc", "Attribution NonCommercial"),
                            ("by-nc-sa", "Attribution NonCommercial ShareAlike"),
                            ("by-nc-nd", "Attribution NonCommercial NoDerivs"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Creative Commons license",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="communities.Community",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("allow_comments", models.BooleanField(default=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="photos.Photo",
                    ),
                ),
                ("is_reshare", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "historical photo",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RemoveIndex(
            model_name="photo", name="photos_phot_owner_i_23fd94_idx",
        ),
        migrations.AddIndex(
            model_name="photo",
            index=models.Index(
                fields=["created", "-created"], name="photos_phot_created_7dea62_idx"
            ),
        ),
        migrations.AlterField(
            model_name="historicalphoto",
            name="original_url",
            field=models.URLField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name="photo",
            name="original_url",
            field=models.URLField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="published",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="photo",
            name="published",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="photo",
            index=models.Index(
                fields=["published", "-published"],
                name="photos_phot_publish_dbe9aa_idx",
            ),
        ),
        # migrations.RunPython(
        # code=localhub.photos.migrations.0016_auto_20191121_1809.set_default_published,
        # ),
        migrations.AlterField(
            model_name="historicalphoto",
            name="image",
            field=models.TextField(
                help_text="For best results, photos should be no larger than 1MB. If the image is too large it will not be accepted.",
                max_length=100,
                verbose_name="Photo",
            ),
        ),
        migrations.AlterField(
            model_name="photo",
            name="image",
            field=sorl.thumbnail.fields.ImageField(
                help_text="For best results, photos should be no larger than 1MB. If the image is too large it will not be accepted.",
                upload_to="photos",
                verbose_name="Photo",
            ),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="edited",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="photo",
            name="edited",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="is_pinned",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="photo",
            name="is_pinned",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="deleted",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="photo",
            name="deleted",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="latitude",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="longitude",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="photo",
            name="latitude",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="photo",
            name="longitude",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="mentions",
            field=localhub.users.fields.MentionsField(blank=True, max_length=300),
        ),
        migrations.AddField(
            model_name="photo",
            name="mentions",
            field=localhub.users.fields.MentionsField(blank=True, max_length=300),
        ),
        migrations.AddField(
            model_name="historicalphoto",
            name="hashtags",
            field=localhub.hashtags.fields.HashtagsField(blank=True, max_length=300),
        ),
        migrations.AddField(
            model_name="photo",
            name="hashtags",
            field=localhub.hashtags.fields.HashtagsField(blank=True, max_length=300),
        ),
        migrations.DeleteModel(name="HistoricalPhoto",),
    ]
