# Generated by Django 3.0.5 on 2020-04-23 03:12

# Django
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

# Third Party Libraries
import sorl.thumbnail.fields
import timezone_field.fields

# Localhub
import localhub.db.fields
import localhub.markdown.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
        ("taggit", "0003_taggeditem_add_unique_index"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Full name"
                    ),
                ),
                ("bio", localhub.markdown.fields.MarkdownField(blank=True)),
                (
                    "avatar",
                    sorl.thumbnail.fields.ImageField(
                        blank=True, null=True, upload_to="avatars"
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("fi", "Suomi")],
                        default="en",
                        max_length=6,
                    ),
                ),
                (
                    "default_timezone",
                    timezone_field.fields.TimeZoneField(default="UTC"),
                ),
                (
                    "activity_stream_filters",
                    localhub.db.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "users",
                                    "Limited to only content from people I'm following",
                                ),
                                ("tags", "Limited to only tags I'm following"),
                            ],
                            max_length=12,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("show_external_images", models.BooleanField(default=True)),
                ("show_sensitive_content", models.BooleanField(default=False)),
                ("show_embedded_content", models.BooleanField(default=False)),
                ("send_email_notifications", models.BooleanField(default=True)),
                (
                    "dismissed_notices",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "search_document",
                    django.contrib.postgres.search.SearchVectorField(
                        editable=False, null=True
                    ),
                ),
                (
                    "blocked",
                    models.ManyToManyField(
                        blank=True, related_name="blockers", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "blocked_tags",
                    models.ManyToManyField(
                        blank=True, related_name="_user_blocked_tags_+", to="taggit.Tag"
                    ),
                ),
                (
                    "following",
                    models.ManyToManyField(
                        blank=True,
                        related_name="followers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "following_tags",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_user_following_tags_+",
                        to="taggit.Tag",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_document"], name="users_user_search__568be7_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["name", "username", "email"], name="users_user_name_211263_idx"
            ),
        ),
    ]
